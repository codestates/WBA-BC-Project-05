// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TotoroBetBet is an auto generated low-level Go binding around an user-defined struct.
type TotoroBetBet struct {
	BetId  *big.Int
	GameId *big.Int
	Amount *big.Int
	Bettor common.Address
	Target uint8
	Hit    bool
}

// TotoroGameGame is an auto generated low-level Go binding around an user-defined struct.
type TotoroGameGame struct {
	GameId           *big.Int
	Creator          common.Address
	Title            string
	Description      string
	Home             string
	Away             string
	HomeOdd          *big.Int
	AwayOdd          *big.Int
	VoteHomeCount    *big.Int
	VoteAwayCount    *big.Int
	VoteVoidCount    *big.Int
	MaxRewardAmount  *big.Int
	MaxRewardHomeAcc *big.Int
	MaxRewardAwayAcc *big.Int
	HomeAccReward    *big.Int
	AwayAccReward    *big.Int
	CreateDate       uint32
	BetEndDate       uint32
	VoteEndDate      uint32
}

// TotoroVoteVote is an auto generated low-level Go binding around an user-defined struct.
type TotoroVoteVote struct {
	VoteId *big.Int
	GameId *big.Int
	Voter  common.Address
	Target uint8
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structTotoroBet.Bet\",\"name\":\"bet\",\"type\":\"tuple\"}],\"name\":\"EvBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"EvCalculate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteHomeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteAwayCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteVoidCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardHomeAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAwayAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteEndDate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"structTotoroGame.Game\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"EvCreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structTotoroVote.Vote\",\"name\":\"vote\",\"type\":\"tuple\"}],\"name\":\"EvVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betAway\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betHome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_voteEndDate\",\"type\":\"uint32\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteVoid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060400160405280600c81526020017f544f544f524f20546f6b656e0000000000000000000000000000000000000000815250600390816200004a9190620003c6565b506040518060400160405280600381526020017f545452000000000000000000000000000000000000000000000000000000000081525060049081620000919190620003c6565b506012600560006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b506b033b2e3c9fd0803ce8000000600080828254620000db9190620004dc565b925050819055506b033b2e3c9fd0803ce8000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200013f9190620004dc565b9250508190555062000517565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001ce57607f821691505b602082108103620001e457620001e362000186565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200024e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200020f565b6200025a86836200020f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002a7620002a16200029b8462000272565b6200027c565b62000272565b9050919050565b6000819050919050565b620002c38362000286565b620002db620002d282620002ae565b8484546200021c565b825550505050565b600090565b620002f2620002e3565b620002ff818484620002b8565b505050565b5b8181101562000327576200031b600082620002e8565b60018101905062000305565b5050565b601f82111562000376576200034081620001ea565b6200034b84620001ff565b810160208510156200035b578190505b620003736200036a85620001ff565b83018262000304565b50505b505050565b600082821c905092915050565b60006200039b600019846008026200037b565b1980831691505092915050565b6000620003b6838362000388565b9150826002028217905092915050565b620003d1826200014c565b67ffffffffffffffff811115620003ed57620003ec62000157565b5b620003f98254620001b5565b620004068282856200032b565b600060209050601f8311600181146200043e576000841562000429578287015190505b620004358582620003a8565b865550620004a5565b601f1984166200044e86620001ea565b60005b82811015620004785784890151825560018201915060208501945060208101905062000451565b8683101562000498578489015162000494601f89168262000388565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004e98262000272565b9150620004f68362000272565b9250828201905080821115620005115762000510620004ad565b5b92915050565b61485980620005276000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635788577f116100a2578063a432e8f811610071578063a432e8f814610309578063a9059cbb14610325578063b323a98414610355578063dd62ed3e14610371578063ef6e3f7e146103a157610116565b80635788577f1461026f57806370a082311461029f57806395d89b41146102cf578063a0712d68146102ed57610116565b806319db8d3b116100e957806319db8d3b146101a557806323b872dd146101d5578063313ce567146102055780633b99954a1461022357806342966c681461025357610116565b806306fdde031461011b578063095ea7b314610139578063150704011461016957806318160ddd14610187575b600080fd5b6101236103bd565b60405161013091906135bf565b60405180910390f35b610153600480360381019061014e9190613689565b61044b565b60405161016091906136e4565b60405180910390f35b61017161053d565b60405161017e91906135bf565b60405180910390f35b61018f6105cf565b60405161019c919061370e565b60405180910390f35b6101bf60048036038101906101ba9190613729565b6105d5565b6040516101cc91906136e4565b60405180910390f35b6101ef60048036038101906101ea9190613769565b610c07565b6040516101fc91906136e4565b60405180910390f35b61020d610db8565b60405161021a91906137d8565b60405180910390f35b61023d60048036038101906102389190613964565b610dcb565b60405161024a91906136e4565b60405180910390f35b61026d60048036038101906102689190613a9e565b611343565b005b61028960048036038101906102849190613729565b61141a565b60405161029691906136e4565b60405180910390f35b6102b960048036038101906102b49190613acb565b611a4c565b6040516102c6919061370e565b60405180910390f35b6102d7611a64565b6040516102e491906135bf565b60405180910390f35b61030760048036038101906103029190613a9e565b611af2565b005b610323600480360381019061031e9190613a9e565b611bc9565b005b61033f600480360381019061033a9190613689565b611df4565b60405161034c91906136e4565b60405180910390f35b61036f600480360381019061036a9190613a9e565b611f11565b005b61038b60048036038101906103869190613af8565b61213d565b604051610398919061370e565b60405180910390f35b6103bb60048036038101906103b69190613a9e565b612162565b005b600380546103ca90613b67565b80601f01602080910402602001604051908101604052809291908181526020018280546103f690613b67565b80156104435780601f1061041857610100808354040283529160200191610443565b820191906000526020600020905b81548152906001019060200180831161042657829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161052b919061370e565b60405180910390a36001905092915050565b60606004805461054c90613b67565b80601f016020809104026020016040519081016040528092919081815260200182805461057890613b67565b80156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b5050505050905090565b60005481565b60008282620f4240600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062b9190613bc7565b92505081905550600042905081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090613c47565b60405180910390fd5b8260016006805490506106cc9190613c67565b101561070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490613ce7565b60405180910390fd5b6006838154811061072157610720613d07565b5b906000526020600020906011020160100160049054906101000a900463ffffffff1663ffffffff168163ffffffff1610610790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078790613d82565b60405180910390fd5b6000600687815481106107a6576107a5613d07565b5b90600052602060002090601102016006015490506000600688815481106107d0576107cf613d07565b5b9060005260206000209060110201600c01549050600087836107f29190613da2565b905081816108009190613bc7565b60068a8154811061081457610813613d07565b5b9060005260206000209060110201600b01541015610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90613e56565b60405180910390fd5b6000600a805490509050600a6040518060c001604052808381526020018c81526020018b81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600060ff16815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff021916908360ff16021790555060a08201518160030160156101000a81548160ff0219169083151502179055505050600b60008b815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505589600c60008381526020019081526020016000208190555033600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505588600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ae79190613c67565b925050819055508160068b81548110610b0357610b02613d07565b5b9060005260206000209060110201600c016000828254610b239190613bc7565b92505081905550600f60008b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae600a8281548110610bd357610bd2613d07565b5b9060005260206000209060040201604051610bee9190614036565b60405180910390a1600197505050505050505092915050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c959190613c67565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ceb9190613c67565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d419190613bc7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610da5919061370e565b60405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b600080429050620f4240600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008510158015610e68575084600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e90613c47565b60405180910390fd5b8363ffffffff168163ffffffff1610610ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eec9061409d565b60405180910390fd5b8263ffffffff168463ffffffff1610610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90614109565b60405180910390fd5b6000600680549050905060066040518061026001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018d81526020018c81526020018b81526020018a8152602001898152602001600081526020016000815260200160008152602001888152602001600081526020016000815260200160008152602001600081526020014263ffffffff1681526020018763ffffffff1681526020018663ffffffff1681525090806001815401808255809150506001900390600052602060002090601102016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908161108991906142d5565b50606082015181600301908161109f91906142d5565b5060808201518160040190816110b591906142d5565b5060a08201518160050190816110cb91906142d5565b5060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d01556101c082015181600e01556101e082015181600f01556102008201518160100160006101000a81548163ffffffff021916908363ffffffff1602179055506102208201518160100160046101000a81548163ffffffff021916908363ffffffff1602179055506102408201518160100160086101000a81548163ffffffff021916908363ffffffff1602179055505050336008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112b99190613c67565b925050819055508560076000838152602001908152602001600020819055507f72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c6006828154811061130d5761130c613d07565b5b906000526020600020906011020160405161132891906146f9565b60405180910390a16001925050509998505050505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113929190613c67565b92505081905550806000808282546113aa9190613c67565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161140f919061370e565b60405180910390a350565b60008282620f4240600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114709190613bc7565b92505081905550600042905081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156114fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f590613c47565b60405180910390fd5b8260016006805490506115119190613c67565b1015611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154990613ce7565b60405180910390fd5b6006838154811061156657611565613d07565b5b906000526020600020906011020160100160049054906101000a900463ffffffff1663ffffffff168163ffffffff16106115d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc90613d82565b60405180910390fd5b6000600687815481106115eb576115ea613d07565b5b906000526020600020906011020160070154905060006006888154811061161557611614613d07565b5b9060005260206000209060110201600d01549050600087836116379190613da2565b905081816116459190613bc7565b60068a8154811061165957611658613d07565b5b9060005260206000209060110201600b015410156116ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a390613e56565b60405180910390fd5b6000600a805490509050600a6040518060c001604052808381526020018c81526020018b81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600160ff16815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff021916908360ff16021790555060a08201518160030160156101000a81548160ff0219169083151502179055505050600b60008b815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505589600c60008381526020019081526020016000208190555033600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505588600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192c9190613c67565b925050819055508160068b8154811061194857611947613d07565b5b9060005260206000209060110201600d0160008282546119689190613bc7565b92505081905550601060008b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae600a8281548110611a1857611a17613d07565b5b9060005260206000209060040201604051611a339190614036565b60405180910390a1600197505050505050505092915050565b60016020528060005260406000206000915090505481565b60048054611a7190613b67565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d90613b67565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b505050505081565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b419190613bc7565b9250508190555080600080828254611b599190613bc7565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611bbe919061370e565b60405180910390a350565b80600080429050826001600680549050611be39190613c67565b1015611bee57600080fd5b60068381548110611c0257611c01613d07565b5b906000526020600020906011020160100160049054906101000a900463ffffffff1663ffffffff168163ffffffff1611611c3b57600080fd5b6000600b6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611c9a57602002820191906000526020600020905b815481526020019060010190808311611c86575b5050505050905060005b8151811015611d4b576000828281518110611cc257611cc1613d07565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611d3757600080fd5b508080611d439061471b565b915050611ca4565b5060068481548110611d6057611d5f613d07565b5b906000526020600020906011020160100160089054906101000a900463ffffffff1663ffffffff168263ffffffff161115611da557611d9e8461238e565b5050611def565b60068581548110611db957611db8613d07565b5b90600052602060002090601102016008016000815480929190611ddb9061471b565b9190505550611deb856000612885565b5050505b505050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e459190613c67565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e9b9190613bc7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611eff919061370e565b60405180910390a36001905092915050565b8060016000429050826001600680549050611f2c9190613c67565b1015611f3757600080fd5b60068381548110611f4b57611f4a613d07565b5b906000526020600020906011020160100160049054906101000a900463ffffffff1663ffffffff168163ffffffff1611611f8457600080fd5b6000600b6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611fe357602002820191906000526020600020905b815481526020019060010190808311611fcf575b5050505050905060005b815181101561209457600082828151811061200b5761200a613d07565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361208057600080fd5b50808061208c9061471b565b915050611fed565b50600684815481106120a9576120a8613d07565b5b906000526020600020906011020160100160089054906101000a900463ffffffff1663ffffffff168263ffffffff1611156120ee576120e78461238e565b5050612138565b6006858154811061210257612101613d07565b5b906000526020600020906011020160090160008154809291906121249061471b565b9190505550612134856001612885565b5050505b505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b806002600042905082600160068054905061217d9190613c67565b101561218857600080fd5b6006838154811061219c5761219b613d07565b5b906000526020600020906011020160100160049054906101000a900463ffffffff1663ffffffff168163ffffffff16116121d557600080fd5b6000600b600085815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561223457602002820191906000526020600020905b815481526020019060010190808311612220575b5050505050905060005b81518110156122e557600082828151811061225c5761225b613d07565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036122d157600080fd5b5080806122dd9061471b565b91505061223e565b50600684815481106122fa576122f9613d07565b5b906000526020600020906011020160100160089054906101000a900463ffffffff1663ffffffff168263ffffffff16111561233f576123388461238e565b5050612389565b6006858154811061235357612352613d07565b5b9060005260206000209060110201600a0160008154809291906123759061471b565b9190505550612385856002612885565b5050505b505050565b6000600682815481106123a4576123a3613d07565b5b906000526020600020906011020160405180610260016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461242e90613b67565b80601f016020809104026020016040519081016040528092919081815260200182805461245a90613b67565b80156124a75780601f1061247c576101008083540402835291602001916124a7565b820191906000526020600020905b81548152906001019060200180831161248a57829003601f168201915b505050505081526020016003820180546124c090613b67565b80601f01602080910402602001604051908101604052809291908181526020018280546124ec90613b67565b80156125395780601f1061250e57610100808354040283529160200191612539565b820191906000526020600020905b81548152906001019060200180831161251c57829003601f168201915b5050505050815260200160048201805461255290613b67565b80601f016020809104026020016040519081016040528092919081815260200182805461257e90613b67565b80156125cb5780601f106125a0576101008083540402835291602001916125cb565b820191906000526020600020905b8154815290600101906020018083116125ae57829003601f168201915b505050505081526020016005820180546125e490613b67565b80601f016020809104026020016040519081016040528092919081815260200182805461261090613b67565b801561265d5780601f106126325761010080835404028352916020019161265d565b820191906000526020600020905b81548152906001019060200180831161264057829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f82015481526020016010820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016010820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016010820160089054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000600367ffffffffffffffff81111561275b5761275a6137fd565b5b6040519080825280602002602001820160405280156127895781602001602082028036833780820191505090505b509050816101000151816000815181106127a6576127a5613d07565b5b602002602001018181525050816101200151816001815181106127cc576127cb613d07565b5b602002602001018181525050816101400151816002815181106127f2576127f1613d07565b5b602002602001018181525050600061280982612b20565b9050600060ff1681036128245761281f84612b95565b612848565b600160ff16810361283d5761283884612f21565b612847565b612846846132ad565b5b5b7f5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa7284604051612877919061370e565b60405180910390a150505050565b6000806011805490509050601160405180608001604052808381526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018560ff168152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908360ff160217905550505060126000858152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055336013600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150557f053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc60118281548110612a9a57612a99613d07565b5b9060005260206000209060030201604051612ab591906147df565b60405180910390a1612710600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b0e9190613bc7565b92505081905550600191505092915050565b600080600090506000805b8451811015612b8a57848181518110612b4757612b46613d07565b5b6020026020010151831015612b7757848181518110612b6957612b68613d07565b5b602002602001015192508091505b8080612b829061471b565b915050612b2b565b508092505050919050565b600060068281548110612bab57612baa613d07565b5b9060005260206000209060110201600601549050600060068381548110612bd557612bd4613d07565b5b9060005260206000209060110201600e0154905060005b600b6000858152602001908152602001600020805490508160ff161015612dc0576000600a600b60008781526020019081526020016000208360ff1681548110612c3957612c38613d07565b5b906000526020600020015481548110612c5557612c54613d07565b5b90600052602060002090600402016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1660ff1660ff1681526020016003820160159054906101000a900460ff1615151515815250509050600060ff16816080015160ff1603612dac576000848260400151612d409190613da2565b90508060016000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d959190613bc7565b925050819055508084612da89190613c67565b9350505b508080612db8906147fa565b915050612bec565b50806001600060068681548110612dda57612dd9613d07565b5b906000526020600020906011020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e559190613bc7565b9250508190555060068381548110612e7057612e6f613d07565b5b9060005260206000209060110201600f01546001600060068681548110612e9a57612e99613d07565b5b906000526020600020906011020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f159190613bc7565b92505081905550505050565b600060068281548110612f3757612f36613d07565b5b9060005260206000209060110201600701549050600060068381548110612f6157612f60613d07565b5b9060005260206000209060110201600f0154905060005b600b6000858152602001908152602001600020805490508160ff16101561314c576000600a600b60008781526020019081526020016000208360ff1681548110612fc557612fc4613d07565b5b906000526020600020015481548110612fe157612fe0613d07565b5b90600052602060002090600402016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1660ff1660ff1681526020016003820160159054906101000a900460ff1615151515815250509050600160ff16816080015160ff16036131385760008482604001516130cc9190613da2565b90508060016000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131219190613bc7565b9250508190555080846131349190613c67565b9350505b508080613144906147fa565b915050612f78565b5080600160006006868154811061316657613165613d07565b5b906000526020600020906011020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131e19190613bc7565b92505081905550600683815481106131fc576131fb613d07565b5b9060005260206000209060110201600f0154600160006006868154811061322657613225613d07565b5b906000526020600020906011020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132a19190613bc7565b92505081905550505050565b6000600760008381526020019081526020016000205490508060016000600685815481106132de576132dd613d07565b5b906000526020600020906011020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156133ad57602002820191906000526020600020905b815481526020019060010190808311613399575b5050505050905060005b8151811015613529576000600a8383815181106133d7576133d6613d07565b5b6020026020010151815481106133f0576133ef613d07565b5b90600052602060002090600402016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1660ff1660ff1681526020016003820160159054906101000a900460ff1615151515815250509050806040015160016000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461350e9190613bc7565b925050819055505080806135219061471b565b9150506133b7565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561356957808201518184015260208101905061354e565b60008484015250505050565b6000601f19601f8301169050919050565b60006135918261352f565b61359b818561353a565b93506135ab81856020860161354b565b6135b481613575565b840191505092915050565b600060208201905081810360008301526135d98184613586565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613620826135f5565b9050919050565b61363081613615565b811461363b57600080fd5b50565b60008135905061364d81613627565b92915050565b6000819050919050565b61366681613653565b811461367157600080fd5b50565b6000813590506136838161365d565b92915050565b600080604083850312156136a05761369f6135eb565b5b60006136ae8582860161363e565b92505060206136bf85828601613674565b9150509250929050565b60008115159050919050565b6136de816136c9565b82525050565b60006020820190506136f960008301846136d5565b92915050565b61370881613653565b82525050565b600060208201905061372360008301846136ff565b92915050565b600080604083850312156137405761373f6135eb565b5b600061374e85828601613674565b925050602061375f85828601613674565b9150509250929050565b600080600060608486031215613782576137816135eb565b5b60006137908682870161363e565b93505060206137a18682870161363e565b92505060406137b286828701613674565b9150509250925092565b600060ff82169050919050565b6137d2816137bc565b82525050565b60006020820190506137ed60008301846137c9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61383582613575565b810181811067ffffffffffffffff82111715613854576138536137fd565b5b80604052505050565b60006138676135e1565b9050613873828261382c565b919050565b600067ffffffffffffffff821115613893576138926137fd565b5b61389c82613575565b9050602081019050919050565b82818337600083830152505050565b60006138cb6138c684613878565b61385d565b9050828152602081018484840111156138e7576138e66137f8565b5b6138f28482856138a9565b509392505050565b600082601f83011261390f5761390e6137f3565b5b813561391f8482602086016138b8565b91505092915050565b600063ffffffff82169050919050565b61394181613928565b811461394c57600080fd5b50565b60008135905061395e81613938565b92915050565b60008060008060008060008060006101208a8c031215613987576139866135eb565b5b60008a013567ffffffffffffffff8111156139a5576139a46135f0565b5b6139b18c828d016138fa565b99505060208a013567ffffffffffffffff8111156139d2576139d16135f0565b5b6139de8c828d016138fa565b98505060408a013567ffffffffffffffff8111156139ff576139fe6135f0565b5b613a0b8c828d016138fa565b97505060608a013567ffffffffffffffff811115613a2c57613a2b6135f0565b5b613a388c828d016138fa565b9650506080613a498c828d01613674565b95505060a0613a5a8c828d01613674565b94505060c0613a6b8c828d01613674565b93505060e0613a7c8c828d0161394f565b925050610100613a8e8c828d0161394f565b9150509295985092959850929598565b600060208284031215613ab457613ab36135eb565b5b6000613ac284828501613674565b91505092915050565b600060208284031215613ae157613ae06135eb565b5b6000613aef8482850161363e565b91505092915050565b60008060408385031215613b0f57613b0e6135eb565b5b6000613b1d8582860161363e565b9250506020613b2e8582860161363e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b7f57607f821691505b602082108103613b9257613b91613b38565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bd282613653565b9150613bdd83613653565b9250828201905080821115613bf557613bf4613b98565b5b92915050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000613c3160128361353a565b9150613c3c82613bfb565b602082019050919050565b60006020820190508181036000830152613c6081613c24565b9050919050565b6000613c7282613653565b9150613c7d83613653565b9250828203905081811115613c9557613c94613b98565b5b92915050565b7f496e76616c69642067616d654964000000000000000000000000000000000000600082015250565b6000613cd1600e8361353a565b9150613cdc82613c9b565b602082019050919050565b60006020820190508181036000830152613d0081613cc4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f41726561647920656e642067616d650000000000000000000000000000000000600082015250565b6000613d6c600f8361353a565b9150613d7782613d36565b602082019050919050565b60006020820190508181036000830152613d9b81613d5f565b9050919050565b6000613dad82613653565b9150613db883613653565b9250828202613dc681613653565b91508282048414831517613ddd57613ddc613b98565b5b5092915050565b7f457863656564696e6720746865206d6178696d756d207072697a6520616d6f7560008201527f6e74000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e4060228361353a565b9150613e4b82613de4565b604082019050919050565b60006020820190508181036000830152613e6f81613e33565b9050919050565b60008160001c9050919050565b6000819050919050565b6000613ea0613e9b83613e76565b613e83565b9050919050565b613eb081613653565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ee9613ee483613e76565b613eb6565b9050919050565b613ef981613615565b82525050565b60008160a01c9050919050565b600060ff82169050919050565b6000613f2c613f2783613eff565b613f0c565b9050919050565b613f3c816137bc565b82525050565b60008160a81c9050919050565b600060ff82169050919050565b6000613f6f613f6a83613f42565b613f4f565b9050919050565b613f7f816136c9565b82525050565b60c082016000808301549050613f9a81613e8d565b613fa76000860182613ea7565b5060018301549050613fb881613e8d565b613fc56020860182613ea7565b5060028301549050613fd681613e8d565b613fe36040860182613ea7565b5060038301549050613ff481613ed6565b6140016060860182613ef0565b5061400b81613f19565b6140186080860182613f33565b5061402281613f5c565b61402f60a0860182613f76565b5050505050565b600060c08201905061404b6000830184613f85565b92915050565b7f496e76616c696420426574456e64446174650000000000000000000000000000600082015250565b600061408760128361353a565b915061409282614051565b602082019050919050565b600060208201905081810360008301526140b68161407a565b9050919050565b7f496e76616c696420566f7465456e644461746500000000000000000000000000600082015250565b60006140f360138361353a565b91506140fe826140bd565b602082019050919050565b60006020820190508181036000830152614122816140e6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261418b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261414e565b614195868361414e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006141d26141cd6141c884613653565b6141ad565b613653565b9050919050565b6000819050919050565b6141ec836141b7565b6142006141f8826141d9565b84845461415b565b825550505050565b600090565b614215614208565b6142208184846141e3565b505050565b5b818110156142445761423960008261420d565b600181019050614226565b5050565b601f8211156142895761425a81614129565b6142638461413e565b81016020851015614272578190505b61428661427e8561413e565b830182614225565b50505b505050565b600082821c905092915050565b60006142ac6000198460080261428e565b1980831691505092915050565b60006142c5838361429b565b9150826002028217905092915050565b6142de8261352f565b67ffffffffffffffff8111156142f7576142f66137fd565b5b6143018254613b67565b61430c828285614248565b600060209050601f83116001811461433f576000841561432d578287015190505b61433785826142b9565b86555061439f565b601f19841661434d86614129565b60005b8281101561437557848901518255600182019150602085019450602081019050614350565b86831015614392578489015161438e601f89168261429b565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b600081546143c581613b67565b6143cf81866143a7565b945060018216600081146143ea576001811461440057614433565b60ff198316865281151560200286019350614433565b61440985614129565b60005b8381101561442b5781548189015260018201915060208101905061440c565b808801955050505b50505092915050565b600063ffffffff82169050919050565b600061445f61445a83613e76565b61443c565b9050919050565b61446f81613928565b82525050565b60008160201c9050919050565b600061449561449083614475565b61443c565b9050919050565b60008160401c9050919050565b60006144bc6144b78361449c565b61443c565b9050919050565b6000610260830160008084015490506144db81613e8d565b6144e86000870182613ea7565b50600184015490506144f981613ed6565b6145066020870182613ef0565b5060028401858303604087015261451d83826143b8565b92505060038401858303606087015261453683826143b8565b92505060048401858303608087015261454f83826143b8565b9250506005840185830360a087015261456883826143b8565b9250506006840154905061457b81613e8d565b61458860c0870182613ea7565b506007840154905061459981613e8d565b6145a660e0870182613ea7565b50600884015490506145b781613e8d565b6145c5610100870182613ea7565b50600984015490506145d681613e8d565b6145e4610120870182613ea7565b50600a84015490506145f581613e8d565b614603610140870182613ea7565b50600b840154905061461481613e8d565b614622610160870182613ea7565b50600c840154905061463381613e8d565b614641610180870182613ea7565b50600d840154905061465281613e8d565b6146606101a0870182613ea7565b50600e840154905061467181613e8d565b61467f6101c0870182613ea7565b50600f840154905061469081613e8d565b61469e6101e0870182613ea7565b50601084015490506146af8161444c565b6146bd610200870182614466565b506146c781614482565b6146d5610220870182614466565b506146df816144a9565b6146ed610240870182614466565b50819250505092915050565b6000602082019050818103600083015261471381846144c3565b905092915050565b600061472682613653565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361475857614757613b98565b5b600182019050919050565b60808201600080830154905061477881613e8d565b6147856000860182613ea7565b506001830154905061479681613e8d565b6147a36020860182613ea7565b50600283015490506147b481613ed6565b6147c16040860182613ef0565b506147cb81613f19565b6147d86060860182613f33565b5050505050565b60006080820190506147f46000830184614763565b92915050565b6000614805826137bc565b915060ff820361481857614817613b98565b5b60018201905091905056fea26469706673582212209fb5b58f3998cafc8eb70a5eab5b7dc778a422381a5ceadba71340318e5ed8bd64736f6c63430008110033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCallerSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCaller) GetSymbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getSymbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCallerSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCallerSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCallerSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetAway(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betAway", _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetHome(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betHome", _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsTransactor) CreateGame(opts *bind.TransactOpts, _title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createGame", _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsTransactorSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteAway(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteAway", _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteHome(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteHome", _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteVoid(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteVoid", _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// ContractsApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contracts contract.
type ContractsApprovalIterator struct {
	Event *ContractsApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsApproval represents a Approval event raised by the Contracts contract.
type ContractsApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ContractsApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ContractsApprovalIterator{contract: _Contracts.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractsApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsApproval)
				if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) ParseApproval(log types.Log) (*ContractsApproval, error) {
	event := new(ContractsApproval)
	if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvBetIterator is returned from FilterEvBet and is used to iterate over the raw logs and unpacked data for EvBet events raised by the Contracts contract.
type ContractsEvBetIterator struct {
	Event *ContractsEvBet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvBetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvBet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvBet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvBetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvBetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvBet represents a EvBet event raised by the Contracts contract.
type ContractsEvBet struct {
	Bet TotoroBetBet
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEvBet is a free log retrieval operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) FilterEvBet(opts *bind.FilterOpts) (*ContractsEvBetIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return &ContractsEvBetIterator{contract: _Contracts.contract, event: "EvBet", logs: logs, sub: sub}, nil
}

// WatchEvBet is a free log subscription operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) WatchEvBet(opts *bind.WatchOpts, sink chan<- *ContractsEvBet) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvBet)
				if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvBet is a log parse operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) ParseEvBet(log types.Log) (*ContractsEvBet, error) {
	event := new(ContractsEvBet)
	if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCalculateIterator is returned from FilterEvCalculate and is used to iterate over the raw logs and unpacked data for EvCalculate events raised by the Contracts contract.
type ContractsEvCalculateIterator struct {
	Event *ContractsEvCalculate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCalculateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCalculate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCalculate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCalculateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCalculateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCalculate represents a EvCalculate event raised by the Contracts contract.
type ContractsEvCalculate struct {
	GameId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEvCalculate is a free log retrieval operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) FilterEvCalculate(opts *bind.FilterOpts) (*ContractsEvCalculateIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCalculateIterator{contract: _Contracts.contract, event: "EvCalculate", logs: logs, sub: sub}, nil
}

// WatchEvCalculate is a free log subscription operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) WatchEvCalculate(opts *bind.WatchOpts, sink chan<- *ContractsEvCalculate) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCalculate)
				if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCalculate is a log parse operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) ParseEvCalculate(log types.Log) (*ContractsEvCalculate, error) {
	event := new(ContractsEvCalculate)
	if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCreateGameIterator is returned from FilterEvCreateGame and is used to iterate over the raw logs and unpacked data for EvCreateGame events raised by the Contracts contract.
type ContractsEvCreateGameIterator struct {
	Event *ContractsEvCreateGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCreateGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCreateGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCreateGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCreateGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCreateGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCreateGame represents a EvCreateGame event raised by the Contracts contract.
type ContractsEvCreateGame struct {
	Game TotoroGameGame
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterEvCreateGame is a free log retrieval operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) FilterEvCreateGame(opts *bind.FilterOpts) (*ContractsEvCreateGameIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCreateGameIterator{contract: _Contracts.contract, event: "EvCreateGame", logs: logs, sub: sub}, nil
}

// WatchEvCreateGame is a free log subscription operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) WatchEvCreateGame(opts *bind.WatchOpts, sink chan<- *ContractsEvCreateGame) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCreateGame)
				if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCreateGame is a log parse operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) ParseEvCreateGame(log types.Log) (*ContractsEvCreateGame, error) {
	event := new(ContractsEvCreateGame)
	if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvVoteIterator is returned from FilterEvVote and is used to iterate over the raw logs and unpacked data for EvVote events raised by the Contracts contract.
type ContractsEvVoteIterator struct {
	Event *ContractsEvVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvVote represents a EvVote event raised by the Contracts contract.
type ContractsEvVote struct {
	Vote TotoroVoteVote
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterEvVote is a free log retrieval operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) FilterEvVote(opts *bind.FilterOpts) (*ContractsEvVoteIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvVote")
	if err != nil {
		return nil, err
	}
	return &ContractsEvVoteIterator{contract: _Contracts.contract, event: "EvVote", logs: logs, sub: sub}, nil
}

// WatchEvVote is a free log subscription operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) WatchEvVote(opts *bind.WatchOpts, sink chan<- *ContractsEvVote) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvVote)
				if err := _Contracts.contract.UnpackLog(event, "EvVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvVote is a log parse operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) ParseEvVote(log types.Log) (*ContractsEvVote, error) {
	event := new(ContractsEvVote)
	if err := _Contracts.contract.UnpackLog(event, "EvVote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contracts contract.
type ContractsTransferIterator struct {
	Event *ContractsTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsTransfer represents a Transfer event raised by the Contracts contract.
type ContractsTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractsTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsTransferIterator{contract: _Contracts.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractsTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsTransfer)
				if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) ParseTransfer(log types.Log) (*ContractsTransfer, error) {
	event := new(ContractsTransfer)
	if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
