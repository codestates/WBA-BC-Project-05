// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TotoroBetBet is an auto generated low-level Go binding around an user-defined struct.
type TotoroBetBet struct {
	BetId  *big.Int
	GameId *big.Int
	Amount *big.Int
	Bettor common.Address
	Target uint8
	Hit    bool
}

// TotoroGameGame is an auto generated low-level Go binding around an user-defined struct.
type TotoroGameGame struct {
	GameId           *big.Int
	Creator          common.Address
	Title            string
	Description      string
	Home             string
	Away             string
	HomeOdd          *big.Int
	AwayOdd          *big.Int
	VoteHomeCount    *big.Int
	VoteAwayCount    *big.Int
	VoteVoidCount    *big.Int
	MaxRewardAmount  *big.Int
	MaxRewardHomeAcc *big.Int
	MaxRewardAwayAcc *big.Int
	HomeAccReward    *big.Int
	AwayAccReward    *big.Int
	CreateDate       uint32
	BetEndDate       uint32
	VoteEndDate      uint32
}

// TotoroVoteVote is an auto generated low-level Go binding around an user-defined struct.
type TotoroVoteVote struct {
	VoteId *big.Int
	GameId *big.Int
	Voter  common.Address
	Target uint8
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structTotoroBet.Bet\",\"name\":\"bet\",\"type\":\"tuple\"}],\"name\":\"EvBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"EvCalculate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteHomeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteAwayCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteVoidCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardHomeAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAwayAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteEndDate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"structTotoroGame.Game\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"EvCreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structTotoroVote.Vote\",\"name\":\"vote\",\"type\":\"tuple\"}],\"name\":\"EvVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betAway\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betHome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_voteEndDate\",\"type\":\"uint32\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteVoid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"welcomeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCallerSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCaller) GetSymbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getSymbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCallerSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCallerSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCallerSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetAway(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betAway", _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetHome(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betHome", _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsTransactor) CreateGame(opts *bind.TransactOpts, _title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createGame", _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _voteEndDate) returns(bool)
func (_Contracts *ContractsTransactorSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _voteEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _voteEndDate)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteAway(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteAway", _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteHome(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteHome", _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteVoid(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteVoid", _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// WelcomeToken is a paid mutator transaction binding the contract method 0xaabe3f64.
//
// Solidity: function welcomeToken() returns(bool)
func (_Contracts *ContractsTransactor) WelcomeToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "welcomeToken")
}

// WelcomeToken is a paid mutator transaction binding the contract method 0xaabe3f64.
//
// Solidity: function welcomeToken() returns(bool)
func (_Contracts *ContractsSession) WelcomeToken() (*types.Transaction, error) {
	return _Contracts.Contract.WelcomeToken(&_Contracts.TransactOpts)
}

// WelcomeToken is a paid mutator transaction binding the contract method 0xaabe3f64.
//
// Solidity: function welcomeToken() returns(bool)
func (_Contracts *ContractsTransactorSession) WelcomeToken() (*types.Transaction, error) {
	return _Contracts.Contract.WelcomeToken(&_Contracts.TransactOpts)
}

// ContractsApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contracts contract.
type ContractsApprovalIterator struct {
	Event *ContractsApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsApproval represents a Approval event raised by the Contracts contract.
type ContractsApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ContractsApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ContractsApprovalIterator{contract: _Contracts.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractsApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsApproval)
				if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) ParseApproval(log types.Log) (*ContractsApproval, error) {
	event := new(ContractsApproval)
	if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvBetIterator is returned from FilterEvBet and is used to iterate over the raw logs and unpacked data for EvBet events raised by the Contracts contract.
type ContractsEvBetIterator struct {
	Event *ContractsEvBet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvBetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvBet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvBet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvBetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvBetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvBet represents a EvBet event raised by the Contracts contract.
type ContractsEvBet struct {
	Bet TotoroBetBet
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEvBet is a free log retrieval operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) FilterEvBet(opts *bind.FilterOpts) (*ContractsEvBetIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return &ContractsEvBetIterator{contract: _Contracts.contract, event: "EvBet", logs: logs, sub: sub}, nil
}

// WatchEvBet is a free log subscription operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) WatchEvBet(opts *bind.WatchOpts, sink chan<- *ContractsEvBet) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvBet)
				if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvBet is a log parse operation binding the contract event 0xbcf40d321056f511f4cfee10d50356e2efa4fae38a8c18a91baac21a7c0c64ae.
//
// Solidity: event EvBet((uint256,uint256,uint256,address,uint8,bool) bet)
func (_Contracts *ContractsFilterer) ParseEvBet(log types.Log) (*ContractsEvBet, error) {
	event := new(ContractsEvBet)
	if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCalculateIterator is returned from FilterEvCalculate and is used to iterate over the raw logs and unpacked data for EvCalculate events raised by the Contracts contract.
type ContractsEvCalculateIterator struct {
	Event *ContractsEvCalculate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCalculateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCalculate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCalculate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCalculateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCalculateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCalculate represents a EvCalculate event raised by the Contracts contract.
type ContractsEvCalculate struct {
	GameId *big.Int
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEvCalculate is a free log retrieval operation binding the contract event 0x169412b7ae9b653f3154e94a7af8a38a0218f772527dec78e081a3398e630657.
//
// Solidity: event EvCalculate(uint256 gameId, uint8 result)
func (_Contracts *ContractsFilterer) FilterEvCalculate(opts *bind.FilterOpts) (*ContractsEvCalculateIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCalculateIterator{contract: _Contracts.contract, event: "EvCalculate", logs: logs, sub: sub}, nil
}

// WatchEvCalculate is a free log subscription operation binding the contract event 0x169412b7ae9b653f3154e94a7af8a38a0218f772527dec78e081a3398e630657.
//
// Solidity: event EvCalculate(uint256 gameId, uint8 result)
func (_Contracts *ContractsFilterer) WatchEvCalculate(opts *bind.WatchOpts, sink chan<- *ContractsEvCalculate) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCalculate)
				if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCalculate is a log parse operation binding the contract event 0x169412b7ae9b653f3154e94a7af8a38a0218f772527dec78e081a3398e630657.
//
// Solidity: event EvCalculate(uint256 gameId, uint8 result)
func (_Contracts *ContractsFilterer) ParseEvCalculate(log types.Log) (*ContractsEvCalculate, error) {
	event := new(ContractsEvCalculate)
	if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCreateGameIterator is returned from FilterEvCreateGame and is used to iterate over the raw logs and unpacked data for EvCreateGame events raised by the Contracts contract.
type ContractsEvCreateGameIterator struct {
	Event *ContractsEvCreateGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCreateGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCreateGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCreateGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCreateGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCreateGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCreateGame represents a EvCreateGame event raised by the Contracts contract.
type ContractsEvCreateGame struct {
	Game TotoroGameGame
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterEvCreateGame is a free log retrieval operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) FilterEvCreateGame(opts *bind.FilterOpts) (*ContractsEvCreateGameIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCreateGameIterator{contract: _Contracts.contract, event: "EvCreateGame", logs: logs, sub: sub}, nil
}

// WatchEvCreateGame is a free log subscription operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) WatchEvCreateGame(opts *bind.WatchOpts, sink chan<- *ContractsEvCreateGame) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCreateGame)
				if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCreateGame is a log parse operation binding the contract event 0x72142d7f3e2fb2dc6db6952ac775ebbfd777778b4f187fec135ed5e2197ffe5c.
//
// Solidity: event EvCreateGame((uint256,address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) ParseEvCreateGame(log types.Log) (*ContractsEvCreateGame, error) {
	event := new(ContractsEvCreateGame)
	if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvVoteIterator is returned from FilterEvVote and is used to iterate over the raw logs and unpacked data for EvVote events raised by the Contracts contract.
type ContractsEvVoteIterator struct {
	Event *ContractsEvVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvVote represents a EvVote event raised by the Contracts contract.
type ContractsEvVote struct {
	Vote TotoroVoteVote
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterEvVote is a free log retrieval operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) FilterEvVote(opts *bind.FilterOpts) (*ContractsEvVoteIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvVote")
	if err != nil {
		return nil, err
	}
	return &ContractsEvVoteIterator{contract: _Contracts.contract, event: "EvVote", logs: logs, sub: sub}, nil
}

// WatchEvVote is a free log subscription operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) WatchEvVote(opts *bind.WatchOpts, sink chan<- *ContractsEvVote) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvVote)
				if err := _Contracts.contract.UnpackLog(event, "EvVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvVote is a log parse operation binding the contract event 0x053707a7d13e8b1608e2d79630d1a427dcf895bbcdf555dc3c272eef459c7dfc.
//
// Solidity: event EvVote((uint256,uint256,address,uint8) vote)
func (_Contracts *ContractsFilterer) ParseEvVote(log types.Log) (*ContractsEvVote, error) {
	event := new(ContractsEvVote)
	if err := _Contracts.contract.UnpackLog(event, "EvVote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contracts contract.
type ContractsTransferIterator struct {
	Event *ContractsTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsTransfer represents a Transfer event raised by the Contracts contract.
type ContractsTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractsTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsTransferIterator{contract: _Contracts.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractsTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsTransfer)
				if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) ParseTransfer(log types.Log) (*ContractsTransfer, error) {
	event := new(ContractsTransfer)
	if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
