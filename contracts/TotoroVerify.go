// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TotoroBetBet is an auto generated low-level Go binding around an user-defined struct.
type TotoroBetBet struct {
	GameId    *big.Int
	Bettor    common.Address
	Amount    *big.Int
	BetTarget uint8
	Hit       bool
}

// TotoroGameGame is an auto generated low-level Go binding around an user-defined struct.
type TotoroGameGame struct {
	Creator          common.Address
	Title            string
	Description      string
	Home             string
	Away             string
	HomeOdd          *big.Int
	AwayOdd          *big.Int
	VerifyHomeCount  *big.Int
	VerifyAwayCount  *big.Int
	VerifyVoidCount  *big.Int
	MaxRewardAmount  *big.Int
	MaxRewardHomeAcc *big.Int
	MaxRewardAwayAcc *big.Int
	HomeAccReward    *big.Int
	AwayAccReward    *big.Int
	CreateDate       uint32
	BetEndDate       uint32
	VerifyEndDate    uint32
}

// TotoroVerifyVerify is an auto generated low-level Go binding around an user-defined struct.
type TotoroVerifyVerify struct {
	GameId   *big.Int
	Verifier common.Address
	Vote     uint8
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"betTarget\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structTotoroBet.Bet\",\"name\":\"bet\",\"type\":\"tuple\"}],\"name\":\"EvBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"EvCalculate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifyHomeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifyAwayCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifyVoidCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardHomeAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardAwayAcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayAccReward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"verifyEndDate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"structTotoroGame.Game\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"EvCreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verifyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structTotoroVerify.Verify\",\"name\":\"verify\",\"type\":\"tuple\"}],\"name\":\"EvVerify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betAway\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betHome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_homeOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_awayOdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_betEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_verifyEndDate\",\"type\":\"uint32\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"voteVoid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060400160405280600c81526020017f544f544f524f20546f6b656e0000000000000000000000000000000000000000815250600390816200004a9190620003c6565b506040518060400160405280600381526020017f545452000000000000000000000000000000000000000000000000000000000081525060049081620000919190620003c6565b506012600560006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b506b033b2e3c9fd0803ce8000000600080828254620000db9190620004dc565b925050819055506b033b2e3c9fd0803ce8000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200013f9190620004dc565b9250508190555062000517565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001ce57607f821691505b602082108103620001e457620001e362000186565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200024e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200020f565b6200025a86836200020f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002a7620002a16200029b8462000272565b6200027c565b62000272565b9050919050565b6000819050919050565b620002c38362000286565b620002db620002d282620002ae565b8484546200021c565b825550505050565b600090565b620002f2620002e3565b620002ff818484620002b8565b505050565b5b8181101562000327576200031b600082620002e8565b60018101905062000305565b5050565b601f82111562000376576200034081620001ea565b6200034b84620001ff565b810160208510156200035b578190505b620003736200036a85620001ff565b83018262000304565b50505b505050565b600082821c905092915050565b60006200039b600019846008026200037b565b1980831691505092915050565b6000620003b6838362000388565b9150826002028217905092915050565b620003d1826200014c565b67ffffffffffffffff811115620003ed57620003ec62000157565b5b620003f98254620001b5565b620004068282856200032b565b600060209050601f8311600181146200043e576000841562000429578287015190505b620004358582620003a8565b865550620004a5565b601f1984166200044e86620001ea565b60005b82811015620004785784890151825560018201915060208501945060208101905062000451565b8683101562000498578489015162000494601f89168262000388565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004e98262000272565b9150620004f68362000272565b9250828201905080821115620005115762000510620004ad565b5b92915050565b6143f480620005276000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635788577f116100a2578063a432e8f811610071578063a432e8f814610309578063a9059cbb14610325578063b323a98414610355578063dd62ed3e14610371578063ef6e3f7e146103a157610116565b80635788577f1461026f57806370a082311461029f57806395d89b41146102cf578063a0712d68146102ed57610116565b806319db8d3b116100e957806319db8d3b146101a557806323b872dd146101d5578063313ce567146102055780633b99954a1461022357806342966c681461025357610116565b806306fdde031461011b578063095ea7b314610139578063150704011461016957806318160ddd14610187575b600080fd5b6101236103bd565b60405161013091906132d4565b60405180910390f35b610153600480360381019061014e919061339e565b61044b565b60405161016091906133f9565b60405180910390f35b61017161053d565b60405161017e91906132d4565b60405180910390f35b61018f6105cf565b60405161019c9190613423565b60405180910390f35b6101bf60048036038101906101ba919061343e565b6105d5565b6040516101cc91906133f9565b60405180910390f35b6101ef60048036038101906101ea919061347e565b610ac2565b6040516101fc91906133f9565b60405180910390f35b61020d610c73565b60405161021a91906134ed565b60405180910390f35b61023d60048036038101906102389190613679565b610c86565b60405161024a91906133f9565b60405180910390f35b61026d600480360381019061026891906137b3565b6111fa565b005b6102896004803603810190610284919061343e565b6112d1565b60405161029691906133f9565b60405180910390f35b6102b960048036038101906102b491906137e0565b6117be565b6040516102c69190613423565b60405180910390f35b6102d76117d6565b6040516102e491906132d4565b60405180910390f35b610307600480360381019061030291906137b3565b611864565b005b610323600480360381019061031e91906137b3565b61193b565b005b61033f600480360381019061033a919061339e565b611b55565b60405161034c91906133f9565b60405180910390f35b61036f600480360381019061036a91906137b3565b611c72565b005b61038b6004803603810190610386919061380d565b611e8d565b6040516103989190613423565b60405180910390f35b6103bb60048036038101906103b691906137b3565b611eb2565b005b600380546103ca9061387c565b80601f01602080910402602001604051908101604052809291908181526020018280546103f69061387c565b80156104435780601f1061041857610100808354040283529160200191610443565b820191906000526020600020905b81548152906001019060200180831161042657829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161052b9190613423565b60405180910390a36001905092915050565b60606004805461054c9061387c565b80601f01602080910402602001604051908101604052809291908181526020018280546105789061387c565b80156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b5050505050905090565b60005481565b60008282600042905081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161062957600080fd5b6000830361063657600080fd5b6006838154811061064a576106496138ad565b5b9060005260206000209060100201600f0160049054906101000a900463ffffffff1663ffffffff168163ffffffff161061068357600080fd5b600060068781548110610699576106986138ad565b5b90600052602060002090601002016005015490506000600688815481106106c3576106c26138ad565b5b9060005260206000209060100201600b01549050600087836106e5919061390b565b905081816106f3919061394d565b60068a81548110610707576107066138ad565b5b9060005260206000209060100201600a0154101561072457600080fd5b600a6040518060a001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001600060ff1681526020016000151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff021916908315150217905550505060006001600a805490506108459190613981565b9050600b60008b815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505589600c60008381526020019081526020016000208190555033600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505588600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a09190613981565b925050819055508160068b815481106109bc576109bb6138ad565b5b9060005260206000209060100201600b0160008282546109dc919061394d565b92505081905550600f60008b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff131a97c44438ad9094a2abd040aca2d9c4e61537360c0105e55e3bf23cfbf8081600a8381548110610a8d57610a8c6138ad565b5b9060005260206000209060040201604051610aa9929190613b51565b60405180910390a1600197505050505050505092915050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b509190613981565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ba69190613981565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bfc919061394d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c609190613423565b60405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b600080429050620f4240600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600085118015610d22575084600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b610d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5890613bc6565b60405180910390fd5b8363ffffffff168163ffffffff1610610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690613c32565b60405180910390fd5b8263ffffffff168463ffffffff1610610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490613c9e565b60405180910390fd5b60066040518061024001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001600081526020016000815260200160008152602001878152602001600081526020016000815260200160008152602001600081526020014263ffffffff1681526020018663ffffffff1681526020018563ffffffff16815250908060018154018082558091505060019003906000526020600020906010020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610f299190613e6a565b506040820151816002019081610f3f9190613e6a565b506060820151816003019081610f559190613e6a565b506080820151816004019081610f6b9190613e6a565b5060a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d01556101c082015181600e01556101e082015181600f0160006101000a81548163ffffffff021916908363ffffffff16021790555061020082015181600f0160046101000a81548163ffffffff021916908363ffffffff16021790555061022082015181600f0160086101000a81548163ffffffff021916908363ffffffff1602179055505050600060016006805490506110659190613981565b9050336008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461116e9190613981565b925050819055508560076000838152602001908152602001600020819055507f1ccd5872f84c5b2d9768baba3d4dd95a3e3d34ef72b96a8ae086acc7ddd8475181600683815481106111c3576111c26138ad565b5b90600052602060002090601002016040516111df92919061426f565b60405180910390a16001925050509998505050505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112499190613981565b92505081905550806000808282546112619190613981565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112c69190613423565b60405180910390a350565b60008282600042905081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161132557600080fd5b6000830361133257600080fd5b60068381548110611346576113456138ad565b5b9060005260206000209060100201600f0160049054906101000a900463ffffffff1663ffffffff168163ffffffff161061137f57600080fd5b600060068781548110611395576113946138ad565b5b90600052602060002090601002016006015490506000600688815481106113bf576113be6138ad565b5b9060005260206000209060100201600c01549050600087836113e1919061390b565b905081816113ef919061394d565b60068a81548110611403576114026138ad565b5b9060005260206000209060100201600a0154101561142057600080fd5b600a6040518060a001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001600160ff1681526020016000151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff021916908315150217905550505060006001600a805490506115419190613981565b9050600b60008b815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505589600c60008381526020019081526020016000208190555033600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505588600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461169c9190613981565b925050819055508160068b815481106116b8576116b76138ad565b5b9060005260206000209060100201600c0160008282546116d8919061394d565b92505081905550601060008b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff131a97c44438ad9094a2abd040aca2d9c4e61537360c0105e55e3bf23cfbf8081600a8381548110611789576117886138ad565b5b90600052602060002090600402016040516117a5929190613b51565b60405180910390a1600197505050505050505092915050565b60016020528060005260406000206000915090505481565b600480546117e39061387c565b80601f016020809104026020016040519081016040528092919081815260200182805461180f9061387c565b801561185c5780601f106118315761010080835404028352916020019161185c565b820191906000526020600020905b81548152906001019060200180831161183f57829003601f168201915b505050505081565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118b3919061394d565b92505081905550806000808282546118cb919061394d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516119309190613423565b60405180910390a350565b806000804290506000830361194f57600080fd5b60068381548110611963576119626138ad565b5b9060005260206000209060100201600f0160049054906101000a900463ffffffff1663ffffffff168163ffffffff161161199c57600080fd5b6000600b60008581526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119fb57602002820191906000526020600020905b8154815260200190600101908083116119e7575b5050505050905060005b8151811015611aac576000828281518110611a2357611a226138ad565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611a9857600080fd5b508080611aa49061429f565b915050611a05565b5060068481548110611ac157611ac06138ad565b5b9060005260206000209060100201600f0160089054906101000a900463ffffffff1663ffffffff168263ffffffff161115611b0657611aff846120cd565b5050611b50565b60068581548110611b1a57611b196138ad565b5b90600052602060002090601002016007016000815480929190611b3c9061429f565b9190505550611b4c8560006125b9565b5050505b505050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ba69190613981565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bfc919061394d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c609190613423565b60405180910390a36001905092915050565b806001600042905060008303611c8757600080fd5b60068381548110611c9b57611c9a6138ad565b5b9060005260206000209060100201600f0160049054906101000a900463ffffffff1663ffffffff168163ffffffff1611611cd457600080fd5b6000600b6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611d3357602002820191906000526020600020905b815481526020019060010190808311611d1f575b5050505050905060005b8151811015611de4576000828281518110611d5b57611d5a6138ad565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611dd057600080fd5b508080611ddc9061429f565b915050611d3d565b5060068481548110611df957611df86138ad565b5b9060005260206000209060100201600f0160089054906101000a900463ffffffff1663ffffffff168263ffffffff161115611e3e57611e37846120cd565b5050611e88565b60068581548110611e5257611e516138ad565b5b90600052602060002090601002016008016000815480929190611e749061429f565b9190505550611e848560016125b9565b5050505b505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b806002600042905060008303611ec757600080fd5b60068381548110611edb57611eda6138ad565b5b9060005260206000209060100201600f0160049054906101000a900463ffffffff1663ffffffff168163ffffffff1611611f1457600080fd5b6000600b6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611f7357602002820191906000526020600020905b815481526020019060010190808311611f5f575b5050505050905060005b8151811015612024576000828281518110611f9b57611f9a6138ad565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361201057600080fd5b50808061201c9061429f565b915050611f7d565b5060068481548110612039576120386138ad565b5b9060005260206000209060100201600f0160089054906101000a900463ffffffff1663ffffffff168263ffffffff16111561207e57612077846120cd565b50506120c8565b60068581548110612092576120916138ad565b5b906000526020600020906010020160090160008154809291906120b49061429f565b91905055506120c48560026125b9565b5050505b505050565b6000600682815481106120e3576120e26138ad565b5b9060005260206000209060100201604051806102400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546121639061387c565b80601f016020809104026020016040519081016040528092919081815260200182805461218f9061387c565b80156121dc5780601f106121b1576101008083540402835291602001916121dc565b820191906000526020600020905b8154815290600101906020018083116121bf57829003601f168201915b505050505081526020016002820180546121f59061387c565b80601f01602080910402602001604051908101604052809291908181526020018280546122219061387c565b801561226e5780601f106122435761010080835404028352916020019161226e565b820191906000526020600020905b81548152906001019060200180831161225157829003601f168201915b505050505081526020016003820180546122879061387c565b80601f01602080910402602001604051908101604052809291908181526020018280546122b39061387c565b80156123005780601f106122d557610100808354040283529160200191612300565b820191906000526020600020905b8154815290600101906020018083116122e357829003601f168201915b505050505081526020016004820180546123199061387c565b80601f01602080910402602001604051908101604052809291908181526020018280546123459061387c565b80156123925780601f1061236757610100808354040283529160200191612392565b820191906000526020600020905b81548152906001019060200180831161237557829003601f168201915b505050505081526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160089054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000600367ffffffffffffffff8111156124905761248f613512565b5b6040519080825280602002602001820160405280156124be5781602001602082028036833780820191505090505b5090508160e00151816000815181106124da576124d96138ad565b5b60200260200101818152505081610100015181600181518110612500576124ff6138ad565b5b60200260200101818152505081610120015181600281518110612526576125256138ad565b5b602002602001018181525050600061253d82612853565b9050600060ff16810361255857612553846128c8565b61257c565b600160ff1681036125715761256c84612c4a565b61257b565b61257a84612fcc565b5b5b7f5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72846040516125ab9190613423565b60405180910390a150505050565b6000601160405180606001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff1602179055505050600060016011805490506126a29190613981565b905060126000858152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055336013600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150557f82be862c46dba9b40abbc8ddb6f8ffb341ad9af129a1e153311586d7a0afdafd81601183815481106127cc576127cb6138ad565b5b90600052602060002090600202016040516127e892919061436c565b60405180910390a1612710600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612841919061394d565b92505081905550600191505092915050565b600080600090506000805b84518110156128bd5784818151811061287a576128796138ad565b5b60200260200101518310156128aa5784818151811061289c5761289b6138ad565b5b602002602001015192508091505b80806128b59061429f565b91505061285e565b508092505050919050565b6000600682815481106128de576128dd6138ad565b5b9060005260206000209060100201600501549050600060068381548110612908576129076138ad565b5b9060005260206000209060100201600d0154905060005b600b6000858152602001908152602001600020805490508160ff161015612ae9576000600a600b60008781526020019081526020016000208360ff168154811061296c5761296b6138ad565b5b906000526020600020015481548110612988576129876138ad565b5b90600052602060002090600402016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff1615151515815250509050600060ff16816060015160ff1603612ad5576000848260400151612a69919061390b565b90508060016000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612abe919061394d565b925050819055508084612ad19190613981565b9350505b508080612ae190614395565b91505061291f565b50806001600060068681548110612b0357612b026138ad565b5b906000526020600020906010020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b7e919061394d565b9250508190555060068381548110612b9957612b986138ad565b5b9060005260206000209060100201600e01546001600060068681548110612bc357612bc26138ad565b5b906000526020600020906010020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c3e919061394d565b92505081905550505050565b600060068281548110612c6057612c5f6138ad565b5b9060005260206000209060100201600601549050600060068381548110612c8a57612c896138ad565b5b9060005260206000209060100201600e0154905060005b600b6000858152602001908152602001600020805490508160ff161015612e6b576000600a600b60008781526020019081526020016000208360ff1681548110612cee57612ced6138ad565b5b906000526020600020015481548110612d0a57612d096138ad565b5b90600052602060002090600402016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff1615151515815250509050600160ff16816060015160ff1603612e57576000848260400151612deb919061390b565b90508060016000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e40919061394d565b925050819055508084612e539190613981565b9350505b508080612e6390614395565b915050612ca1565b50806001600060068681548110612e8557612e846138ad565b5b906000526020600020906010020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f00919061394d565b9250508190555060068381548110612f1b57612f1a6138ad565b5b9060005260206000209060100201600e01546001600060068681548110612f4557612f446138ad565b5b906000526020600020906010020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fc0919061394d565b92505081905550505050565b600060076000838152602001908152602001600020549050806001600060068581548110612ffd57612ffc6138ad565b5b906000526020600020906010020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156130cc57602002820191906000526020600020905b8154815260200190600101908083116130b8575b5050505050905060005b815181101561323e576000600a8383815181106130f6576130f56138ad565b5b60200260200101518154811061310f5761310e6138ad565b5b90600052602060002090600402016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff1615151515815250509050806040015160016000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613223919061394d565b925050819055505080806132369061429f565b9150506130d6565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561327e578082015181840152602081019050613263565b60008484015250505050565b6000601f19601f8301169050919050565b60006132a682613244565b6132b0818561324f565b93506132c0818560208601613260565b6132c98161328a565b840191505092915050565b600060208201905081810360008301526132ee818461329b565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133358261330a565b9050919050565b6133458161332a565b811461335057600080fd5b50565b6000813590506133628161333c565b92915050565b6000819050919050565b61337b81613368565b811461338657600080fd5b50565b60008135905061339881613372565b92915050565b600080604083850312156133b5576133b4613300565b5b60006133c385828601613353565b92505060206133d485828601613389565b9150509250929050565b60008115159050919050565b6133f3816133de565b82525050565b600060208201905061340e60008301846133ea565b92915050565b61341d81613368565b82525050565b60006020820190506134386000830184613414565b92915050565b6000806040838503121561345557613454613300565b5b600061346385828601613389565b925050602061347485828601613389565b9150509250929050565b60008060006060848603121561349757613496613300565b5b60006134a586828701613353565b93505060206134b686828701613353565b92505060406134c786828701613389565b9150509250925092565b600060ff82169050919050565b6134e7816134d1565b82525050565b600060208201905061350260008301846134de565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61354a8261328a565b810181811067ffffffffffffffff8211171561356957613568613512565b5b80604052505050565b600061357c6132f6565b90506135888282613541565b919050565b600067ffffffffffffffff8211156135a8576135a7613512565b5b6135b18261328a565b9050602081019050919050565b82818337600083830152505050565b60006135e06135db8461358d565b613572565b9050828152602081018484840111156135fc576135fb61350d565b5b6136078482856135be565b509392505050565b600082601f83011261362457613623613508565b5b81356136348482602086016135cd565b91505092915050565b600063ffffffff82169050919050565b6136568161363d565b811461366157600080fd5b50565b6000813590506136738161364d565b92915050565b60008060008060008060008060006101208a8c03121561369c5761369b613300565b5b60008a013567ffffffffffffffff8111156136ba576136b9613305565b5b6136c68c828d0161360f565b99505060208a013567ffffffffffffffff8111156136e7576136e6613305565b5b6136f38c828d0161360f565b98505060408a013567ffffffffffffffff81111561371457613713613305565b5b6137208c828d0161360f565b97505060608a013567ffffffffffffffff81111561374157613740613305565b5b61374d8c828d0161360f565b965050608061375e8c828d01613389565b95505060a061376f8c828d01613389565b94505060c06137808c828d01613389565b93505060e06137918c828d01613664565b9250506101006137a38c828d01613664565b9150509295985092959850929598565b6000602082840312156137c9576137c8613300565b5b60006137d784828501613389565b91505092915050565b6000602082840312156137f6576137f5613300565b5b600061380484828501613353565b91505092915050565b6000806040838503121561382457613823613300565b5b600061383285828601613353565b925050602061384385828601613353565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061389457607f821691505b6020821081036138a7576138a661384d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061391682613368565b915061392183613368565b925082820261392f81613368565b91508282048414831517613946576139456138dc565b5b5092915050565b600061395882613368565b915061396383613368565b925082820190508082111561397b5761397a6138dc565b5b92915050565b600061398c82613368565b915061399783613368565b92508282039050818111156139af576139ae6138dc565b5b92915050565b60008160001c9050919050565b6000819050919050565b60006139df6139da836139b5565b6139c2565b9050919050565b6139ef81613368565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a28613a23836139b5565b6139f5565b9050919050565b613a388161332a565b82525050565b600060ff82169050919050565b6000613a5e613a59836139b5565b613a3e565b9050919050565b613a6e816134d1565b82525050565b60008160081c9050919050565b600060ff82169050919050565b6000613aa1613a9c83613a74565b613a81565b9050919050565b613ab1816133de565b82525050565b60a082016000808301549050613acc816139cc565b613ad960008601826139e6565b5060018301549050613aea81613a15565b613af76020860182613a2f565b5060028301549050613b08816139cc565b613b1560408601826139e6565b5060038301549050613b2681613a4b565b613b336060860182613a65565b50613b3d81613a8e565b613b4a6080860182613aa8565b5050505050565b600060c082019050613b666000830185613414565b613b736020830184613ab7565b9392505050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000613bb060128361324f565b9150613bbb82613b7a565b602082019050919050565b60006020820190508181036000830152613bdf81613ba3565b9050919050565b7f496e76616c696420426574456e64446174650000000000000000000000000000600082015250565b6000613c1c60128361324f565b9150613c2782613be6565b602082019050919050565b60006020820190508181036000830152613c4b81613c0f565b9050919050565b7f496e76616c696420566572696679456e64446174650000000000000000000000600082015250565b6000613c8860158361324f565b9150613c9382613c52565b602082019050919050565b60006020820190508181036000830152613cb781613c7b565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ce3565b613d2a8683613ce3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613d67613d62613d5d84613368565b613d42565b613368565b9050919050565b6000819050919050565b613d8183613d4c565b613d95613d8d82613d6e565b848454613cf0565b825550505050565b600090565b613daa613d9d565b613db5818484613d78565b505050565b5b81811015613dd957613dce600082613da2565b600181019050613dbb565b5050565b601f821115613e1e57613def81613cbe565b613df884613cd3565b81016020851015613e07578190505b613e1b613e1385613cd3565b830182613dba565b50505b505050565b600082821c905092915050565b6000613e4160001984600802613e23565b1980831691505092915050565b6000613e5a8383613e30565b9150826002028217905092915050565b613e7382613244565b67ffffffffffffffff811115613e8c57613e8b613512565b5b613e96825461387c565b613ea1828285613ddd565b600060209050601f831160018114613ed45760008415613ec2578287015190505b613ecc8582613e4e565b865550613f34565b601f198416613ee286613cbe565b60005b82811015613f0a57848901518255600182019150602085019450602081019050613ee5565b86831015613f275784890151613f23601f891682613e30565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b60008154613f5a8161387c565b613f648186613f3c565b94506001821660008114613f7f5760018114613f9557613fc8565b60ff198316865281151560200286019350613fc8565b613f9e85613cbe565b60005b83811015613fc057815481890152600182019150602081019050613fa1565b808801955050505b50505092915050565b600063ffffffff82169050919050565b6000613ff4613fef836139b5565b613fd1565b9050919050565b6140048161363d565b82525050565b60008160201c9050919050565b600061402a6140258361400a565b613fd1565b9050919050565b60008160401c9050919050565b600061405161404c83614031565b613fd1565b9050919050565b60006102408301600080840154905061407081613a15565b61407d6000870182613a2f565b506001840185830360208701526140948382613f4d565b9250506002840185830360408701526140ad8382613f4d565b9250506003840185830360608701526140c68382613f4d565b9250506004840185830360808701526140df8382613f4d565b925050600584015490506140f2816139cc565b6140ff60a08701826139e6565b5060068401549050614110816139cc565b61411d60c08701826139e6565b506007840154905061412e816139cc565b61413b60e08701826139e6565b506008840154905061414c816139cc565b61415a6101008701826139e6565b506009840154905061416b816139cc565b6141796101208701826139e6565b50600a840154905061418a816139cc565b6141986101408701826139e6565b50600b84015490506141a9816139cc565b6141b76101608701826139e6565b50600c84015490506141c8816139cc565b6141d66101808701826139e6565b50600d84015490506141e7816139cc565b6141f56101a08701826139e6565b50600e8401549050614206816139cc565b6142146101c08701826139e6565b50600f840154905061422581613fe1565b6142336101e0870182613ffb565b5061423d81614017565b61424b610200870182613ffb565b506142558161403e565b614263610220870182613ffb565b50819250505092915050565b60006040820190506142846000830185613414565b81810360208301526142968184614058565b90509392505050565b60006142aa82613368565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036142dc576142db6138dc565b5b600182019050919050565b60008160a01c9050919050565b6000614307614302836142e7565b613a3e565b9050919050565b606082016000808301549050614323816139cc565b61433060008601826139e6565b506001830154905061434181613a15565b61434e6020860182613a2f565b50614358816142f4565b6143656040860182613a65565b5050505050565b60006080820190506143816000830185613414565b61438e602083018461430e565b9392505050565b60006143a0826134d1565b915060ff82036143b3576143b26138dc565b5b60018201905091905056fea26469706673582212207a43ee3c7998b7b4057bae02fa6240a1821d22d3ec70dd6ab2ff22e149f5b09264736f6c63430008110033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contracts.Contract.Allowance(&_Contracts.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Contracts *ContractsCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Contracts.Contract.BalanceOf(&_Contracts.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contracts *ContractsCallerSession) Decimals() (uint8, error) {
	return _Contracts.Contract.Decimals(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCaller) GetSymbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getSymbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// GetSymbol is a free data retrieval call binding the contract method 0x15070401.
//
// Solidity: function getSymbol() view returns(string)
func (_Contracts *ContractsCallerSession) GetSymbol() (string, error) {
	return _Contracts.Contract.GetSymbol(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contracts *ContractsCallerSession) Name() (string, error) {
	return _Contracts.Contract.Name(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contracts *ContractsCallerSession) Symbol() (string, error) {
	return _Contracts.Contract.Symbol(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalSupply() (*big.Int, error) {
	return _Contracts.Contract.TotalSupply(&_Contracts.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Approve(&_Contracts.TransactOpts, spender, amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetAway(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betAway", _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetAway is a paid mutator transaction binding the contract method 0x5788577f.
//
// Solidity: function betAway(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetAway(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetAway(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactor) BetHome(opts *bind.TransactOpts, _gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "betHome", _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// BetHome is a paid mutator transaction binding the contract method 0x19db8d3b.
//
// Solidity: function betHome(uint256 _gameId, uint256 _amount) returns(bool)
func (_Contracts *ContractsTransactorSession) BetHome(_gameId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.BetHome(&_Contracts.TransactOpts, _gameId, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Burn(&_Contracts.TransactOpts, amount)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _verifyEndDate) returns(bool)
func (_Contracts *ContractsTransactor) CreateGame(opts *bind.TransactOpts, _title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _verifyEndDate uint32) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createGame", _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _verifyEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _verifyEndDate) returns(bool)
func (_Contracts *ContractsSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _verifyEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _verifyEndDate)
}

// CreateGame is a paid mutator transaction binding the contract method 0x3b99954a.
//
// Solidity: function createGame(string _title, string _description, string _home, string _away, uint256 _homeOdd, uint256 _awayOdd, uint256 _maxRewardAmount, uint32 _betEndDate, uint32 _verifyEndDate) returns(bool)
func (_Contracts *ContractsTransactorSession) CreateGame(_title string, _description string, _home string, _away string, _homeOdd *big.Int, _awayOdd *big.Int, _maxRewardAmount *big.Int, _betEndDate uint32, _verifyEndDate uint32) (*types.Transaction, error) {
	return _Contracts.Contract.CreateGame(&_Contracts.TransactOpts, _title, _description, _home, _away, _homeOdd, _awayOdd, _maxRewardAmount, _betEndDate, _verifyEndDate)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Mint(&_Contracts.TransactOpts, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Contracts *ContractsTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.TransferFrom(&_Contracts.TransactOpts, sender, recipient, amount)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteAway(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteAway", _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteAway is a paid mutator transaction binding the contract method 0xb323a984.
//
// Solidity: function voteAway(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteAway(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteAway(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteHome(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteHome", _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteHome is a paid mutator transaction binding the contract method 0xa432e8f8.
//
// Solidity: function voteHome(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteHome(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteHome(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactor) VoteVoid(opts *bind.TransactOpts, _gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "voteVoid", _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// VoteVoid is a paid mutator transaction binding the contract method 0xef6e3f7e.
//
// Solidity: function voteVoid(uint256 _gameId) returns()
func (_Contracts *ContractsTransactorSession) VoteVoid(_gameId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.VoteVoid(&_Contracts.TransactOpts, _gameId)
}

// ContractsApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contracts contract.
type ContractsApprovalIterator struct {
	Event *ContractsApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsApproval represents a Approval event raised by the Contracts contract.
type ContractsApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ContractsApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ContractsApprovalIterator{contract: _Contracts.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractsApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsApproval)
				if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contracts *ContractsFilterer) ParseApproval(log types.Log) (*ContractsApproval, error) {
	event := new(ContractsApproval)
	if err := _Contracts.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvBetIterator is returned from FilterEvBet and is used to iterate over the raw logs and unpacked data for EvBet events raised by the Contracts contract.
type ContractsEvBetIterator struct {
	Event *ContractsEvBet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvBetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvBet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvBet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvBetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvBetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvBet represents a EvBet event raised by the Contracts contract.
type ContractsEvBet struct {
	BetId *big.Int
	Bet   TotoroBetBet
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEvBet is a free log retrieval operation binding the contract event 0xf131a97c44438ad9094a2abd040aca2d9c4e61537360c0105e55e3bf23cfbf80.
//
// Solidity: event EvBet(uint256 betId, (uint256,address,uint256,uint8,bool) bet)
func (_Contracts *ContractsFilterer) FilterEvBet(opts *bind.FilterOpts) (*ContractsEvBetIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return &ContractsEvBetIterator{contract: _Contracts.contract, event: "EvBet", logs: logs, sub: sub}, nil
}

// WatchEvBet is a free log subscription operation binding the contract event 0xf131a97c44438ad9094a2abd040aca2d9c4e61537360c0105e55e3bf23cfbf80.
//
// Solidity: event EvBet(uint256 betId, (uint256,address,uint256,uint8,bool) bet)
func (_Contracts *ContractsFilterer) WatchEvBet(opts *bind.WatchOpts, sink chan<- *ContractsEvBet) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvBet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvBet)
				if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvBet is a log parse operation binding the contract event 0xf131a97c44438ad9094a2abd040aca2d9c4e61537360c0105e55e3bf23cfbf80.
//
// Solidity: event EvBet(uint256 betId, (uint256,address,uint256,uint8,bool) bet)
func (_Contracts *ContractsFilterer) ParseEvBet(log types.Log) (*ContractsEvBet, error) {
	event := new(ContractsEvBet)
	if err := _Contracts.contract.UnpackLog(event, "EvBet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCalculateIterator is returned from FilterEvCalculate and is used to iterate over the raw logs and unpacked data for EvCalculate events raised by the Contracts contract.
type ContractsEvCalculateIterator struct {
	Event *ContractsEvCalculate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCalculateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCalculate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCalculate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCalculateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCalculateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCalculate represents a EvCalculate event raised by the Contracts contract.
type ContractsEvCalculate struct {
	GameId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEvCalculate is a free log retrieval operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) FilterEvCalculate(opts *bind.FilterOpts) (*ContractsEvCalculateIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCalculateIterator{contract: _Contracts.contract, event: "EvCalculate", logs: logs, sub: sub}, nil
}

// WatchEvCalculate is a free log subscription operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) WatchEvCalculate(opts *bind.WatchOpts, sink chan<- *ContractsEvCalculate) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCalculate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCalculate)
				if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCalculate is a log parse operation binding the contract event 0x5dc400b71ed842b6a1d601626007e7880193c71badc42b546820b2ed379daa72.
//
// Solidity: event EvCalculate(uint256 gameId)
func (_Contracts *ContractsFilterer) ParseEvCalculate(log types.Log) (*ContractsEvCalculate, error) {
	event := new(ContractsEvCalculate)
	if err := _Contracts.contract.UnpackLog(event, "EvCalculate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvCreateGameIterator is returned from FilterEvCreateGame and is used to iterate over the raw logs and unpacked data for EvCreateGame events raised by the Contracts contract.
type ContractsEvCreateGameIterator struct {
	Event *ContractsEvCreateGame // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvCreateGameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvCreateGame)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvCreateGame)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvCreateGameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvCreateGameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvCreateGame represents a EvCreateGame event raised by the Contracts contract.
type ContractsEvCreateGame struct {
	GameId *big.Int
	Game   TotoroGameGame
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEvCreateGame is a free log retrieval operation binding the contract event 0x1ccd5872f84c5b2d9768baba3d4dd95a3e3d34ef72b96a8ae086acc7ddd84751.
//
// Solidity: event EvCreateGame(uint256 gameId, (address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) FilterEvCreateGame(opts *bind.FilterOpts) (*ContractsEvCreateGameIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return &ContractsEvCreateGameIterator{contract: _Contracts.contract, event: "EvCreateGame", logs: logs, sub: sub}, nil
}

// WatchEvCreateGame is a free log subscription operation binding the contract event 0x1ccd5872f84c5b2d9768baba3d4dd95a3e3d34ef72b96a8ae086acc7ddd84751.
//
// Solidity: event EvCreateGame(uint256 gameId, (address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) WatchEvCreateGame(opts *bind.WatchOpts, sink chan<- *ContractsEvCreateGame) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvCreateGame")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvCreateGame)
				if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvCreateGame is a log parse operation binding the contract event 0x1ccd5872f84c5b2d9768baba3d4dd95a3e3d34ef72b96a8ae086acc7ddd84751.
//
// Solidity: event EvCreateGame(uint256 gameId, (address,string,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32) game)
func (_Contracts *ContractsFilterer) ParseEvCreateGame(log types.Log) (*ContractsEvCreateGame, error) {
	event := new(ContractsEvCreateGame)
	if err := _Contracts.contract.UnpackLog(event, "EvCreateGame", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsEvVerifyIterator is returned from FilterEvVerify and is used to iterate over the raw logs and unpacked data for EvVerify events raised by the Contracts contract.
type ContractsEvVerifyIterator struct {
	Event *ContractsEvVerify // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEvVerifyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEvVerify)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEvVerify)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEvVerifyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEvVerifyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEvVerify represents a EvVerify event raised by the Contracts contract.
type ContractsEvVerify struct {
	VerifyId *big.Int
	Verify   TotoroVerifyVerify
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterEvVerify is a free log retrieval operation binding the contract event 0x82be862c46dba9b40abbc8ddb6f8ffb341ad9af129a1e153311586d7a0afdafd.
//
// Solidity: event EvVerify(uint256 verifyId, (uint256,address,uint8) verify)
func (_Contracts *ContractsFilterer) FilterEvVerify(opts *bind.FilterOpts) (*ContractsEvVerifyIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "EvVerify")
	if err != nil {
		return nil, err
	}
	return &ContractsEvVerifyIterator{contract: _Contracts.contract, event: "EvVerify", logs: logs, sub: sub}, nil
}

// WatchEvVerify is a free log subscription operation binding the contract event 0x82be862c46dba9b40abbc8ddb6f8ffb341ad9af129a1e153311586d7a0afdafd.
//
// Solidity: event EvVerify(uint256 verifyId, (uint256,address,uint8) verify)
func (_Contracts *ContractsFilterer) WatchEvVerify(opts *bind.WatchOpts, sink chan<- *ContractsEvVerify) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "EvVerify")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEvVerify)
				if err := _Contracts.contract.UnpackLog(event, "EvVerify", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvVerify is a log parse operation binding the contract event 0x82be862c46dba9b40abbc8ddb6f8ffb341ad9af129a1e153311586d7a0afdafd.
//
// Solidity: event EvVerify(uint256 verifyId, (uint256,address,uint8) verify)
func (_Contracts *ContractsFilterer) ParseEvVerify(log types.Log) (*ContractsEvVerify, error) {
	event := new(ContractsEvVerify)
	if err := _Contracts.contract.UnpackLog(event, "EvVerify", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contracts contract.
type ContractsTransferIterator struct {
	Event *ContractsTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsTransfer represents a Transfer event raised by the Contracts contract.
type ContractsTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractsTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsTransferIterator{contract: _Contracts.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractsTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsTransfer)
				if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contracts *ContractsFilterer) ParseTransfer(log types.Log) (*ContractsTransfer, error) {
	event := new(ContractsTransfer)
	if err := _Contracts.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
